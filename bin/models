#!/usr/bin/env node
'use strict';
const program = require('commander'),
	parser = require('../lib/parser'),
	File = require('../lib/templates/template'),
	glob = require('glob'),
	nodePath = require('path'),
	co = require('co'),
	fs = require('mz/fs');

const pkg = require(nodePath.join(__dirname, '../package.json'));


function findTemplate (str) {
	if (str == null) return null;
	switch (str) {
		case 'swift': return swift
		case 'go': return go
		default:
			throw new Error('template not found');
	}
}

program.version(pkg.version)
.option('-l, --list-templates')
.command('compile <file>', 'compile files. Can use globbing')
.command('lint <file>', 'lint file')

program.parse(process.argv)

if (program.runningCommand) {
	return
}

if (program.listTemplates) {
	listTemplates();
}

function listTemplates () {
	let templatePath = nodePath.resolve(__dirname, '../lib/templates');

  co(function *() {

    let files = yield fs.readdir(templatePath);

    files = files.filter(function (file) {
      return file !== 'template.js';
    });

    files.sort();

    console.log('Available builtin templates:');
    console.log('  ' + files.join('\n  ') + '\n');

  });
}

/*program.command('list')
.description('List available templates')
.action(function () {

  let templatePath = nodePath.resolve(__dirname, '../lib/templates');

  co(function *() {

    let files = yield fs.readdir(templatePath);

    files = files.filter(function (file) {
      return file !== 'template.js';
    });

    files.sort();

    console.log('Available builtin templates:');
    console.log('  ' + files.join('\n  ') + '\n');

  });


});*/